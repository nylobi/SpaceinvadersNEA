// Set up all interrupt handling
setUp:

		mov r0, #handleKeyPress
		str r0, .KeyboardISR 
		mov r0,#1
		strb r0, .KeyboardMask
		
		mov r1, #handleClockInterrupt
		str r1,.ClockISR
		mov r1,#0x05		//50ms 
		strb r1,.ClockInterruptFrequency
		

//Enable all interrupts
      mov r0,#1
      strb r0,.InterruptRegister
	  mov r1,#1
	  strb r1,.InterruptRegister


Main:

		b Main				//infinite loop to test if keyboard presses work 

halt

handleClockInterrupt:
	push {lr,r9-r12}

		ldr r9,interruptSCounter
		add r9,r9,#1
		
		str r9,interruptSCounter
		ldr r10,shipMove
		
		ldr r11,interruptICounter
		add r11,r11,#1				//counter
		
		str r11,interruptICounter

		checkMoveInvaders:
		cmp r11,#50
		bne checkMoveShip
		bl moveRow
		b checkResetCounters

		checkMoveShip:
		cmp r9,#8
		bne checkResetCounters
		
		cmp r10,#1
		bne checkResetCounters
		bl moveShip
		b checkResetCounters
	
		resetIntCount:
		mov r9,#0
		b checkResetCounters
		
		resetICount:
		mov r11,#0
		b checkResetCounters
		
	checkResetCounters:
		cmp r9,#8
		beq resetIntCount
		cmp r11,#50
		beq resetICount
			
			
	
		bl handleLasers	
		str r9,interruptSCounter
		str r11,interruptICounter
	pop {lr,r9-r12}
	RFE
	

//call this from interrupt
handleKeyPress:			
	push {lr,r5,r10,r11,r12}
	ldr r12,.LastKey
	mov r10,#1
	
	cmp r12,#65		//A
	bne checkForD	
	mov r11,#0				//r11 is the direction of the ship
	str r11,shipDirection
	str r10,shipMove
	//bl moveShip
		
	checkForD:
	cmp r12,#68		//D
	bne checkForS	
	mov r11,#2
	str r11,shipDirection	
	str r10,shipMove
	//bl moveShip
	
	checkForS:
	cmp r12,#83		//S
	bne checkForSpace
	mov r11,#1
	str r11,shipDirection
	str r10,shipMove
		
	checkForSpace:
	cmp r12,#32		//spacebar
	bne exit
	mov r5,#1					//r5 is changed but isnt restored, r12 would be fine
	str r5,fireLaser
	
	
	exit:
	pop {lr,r5,r10,r11,r12}
	RFE					//RFE = return from exception


moveShip:
	push {lr,r0-r5,r10,r11}
	ldr r11,shipDirection		//for the ship direction 0 is left (1 will be still) and 2 is right)
    ldr r0,shipX
    ldr r1,shipY
	bl clearShip
	ldr r4,screenLeftEdge
	ldr r5,screenRightEdge
		
	cmp r11,#0					//checking what direction to move the ship in
	beq moveLeft
	cmp r11,#1
	beq stayStill
	cmp r11,#2
	beq moveRight
	b msEnd
	
	moveLeft:
	cmp r0,r4
	beq msEnd			//checking if the ship is at the edge of the screen
	
	sub r0,r0,#1
	b msEnd
	
	moveRight:
	cmp r0,r5
	beq msEnd			//checking if the ship is at the edge of the screen
	
	add r0,r0,#1

	b msEnd
	
	stayStill:
	b msEnd
	
	msEnd:
	bl drawShip
	str r0,shipX
	str r11,shipDirection
	mov r10,#0
	//str r10,shipMove
	pop {lr,r0-r5,r10,r11}
	RET
	
//given x in r0 and y in r1 draws the ship at that location	
drawShip:					
	push {lr,r0-r3}
	
		mov r3,#10			//blue colour | will change back to green/#55 if wanted
		bl drawFromXY
		
		add r0,r0,#1
		bl drawFromXY
		sub r0,r0,#2
		bl drawFromXY
		add r0,r0,#1
		
		sub r1,r1,#1
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET

//given x in r0 and y in r1 draws the ship at that location	
clearShip:					
	push {lr,r0-r3}

		mov r3,#0			//white, background colour
		bl drawFromXY
		
		add r0,r0,#1
		bl drawFromXY
		sub r0,r0,#2
		bl drawFromXY
		add r0,r0,#1
		
		sub r1,r1,#1
		bl drawFromXY	
	
	pop {lr,r0-r3} 
	RET
	
//given x in r0 and y in r1 draws a white pixel at that location (white is the background colour)	
clearpixel:					
	push {lr,r0-r3}
	
		mov r3,#0			
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET
	

//given a colour in r3 draws a space invader at that location specified in main memory
editR23Invader:					
	push {lr,r0-r2,r8-r12}
	
mov r11,#invaderRow23ArmsUp

        mov r12,#0    //row
		mov r9,#1			//the mask
			
		ldr r0,baseInvaderX
		ldr r1,baseInvaderY

					
		loopDSI:
			ldrb r10,[r11 + r12]		//only gets 8 bits 
			and r8,r10,r9
			cmp r8,#0
			beq next
			// if it is equal then draw the pixel of the right colour
			bl drawFromXY
				//draw the next bit in the row
				//LSL r9 by 1, once r1 it is over 256 then exit the loop and increment r12 by 1 and then keep going until r12 is 7/8			
				next:
					lsl r9,r9,#1
					add r0,r0,#1
						cmp r9,#256
						beq next2
						b loopDSI					
						//move to the next row
						next2:					
							mov r9,#1
							add r12,r12,#1
							add r1,r1,#1
							ldr r0,baseInvaderX
							cmp r12,#8
							beq exitDSI												
			b loopDSI			
		exitDSI:
		ldr r0,storedInvaderX
		str r0,baseInvaderX
		mov r0,r0		//no op

	pop {lr,r0-r2,r8-r12}
	RET


	
//given x in r0 and y in r1 (the starting position) will draw a row of space invaders given a width in invaderRowWidth
drawRowOfInvader:				
	push {lr,r3,r4,r10}
	
		ldr r10,invaderRowWidth	
		ldr r4,invaderFlag
		
		cmp r4,#0		//row 1
		beq dr1
	
		cmp r4,#1		//row 2
		beq dr2
		
		cmp r4,#2		//row 3
		beq dr3
		
		dr1:		
		ldr r0,baseR1InvaderX
		ldr r1,baseR1InvaderY
		b storeGeneric
		
		dr2:	
		ldr r0,baseR2InvaderX
		ldr r1,baseR2InvaderY
		b storeGeneric
		
		dr3:		
		ldr r0,baseR3InvaderX
		ldr r1,baseR3InvaderY
		
		
		storeGeneric:
		str r0,baseInvaderX
		str r1,baseInvaderY
		
		
		loopRow:
			mov r3,#55
			bl editR23Invader
		
			add r0,r0,#12			//spacing between invaders
			sub r10,r10,#1
			str r0,baseInvaderX
			cmp r10,#0
			bne loopRow
			
		ldr r0,baseInvaderX
		
		ldr r10,invaderRowWidth	
		
//-------------------------------------
		
	drawRowEnd:
		str r4,invaderFlag
		
	pop {lr,r3,r4,r10}
	RET
	
//given x in r0 and y in r1 (the starting position) will draw a row of space invaders given a width in invaderRowWidth
clearRowOfInvader:				
	push {lr,r3,r4,r10}
	
		ldr r10,invaderRowWidth	
		ldr r4,invaderFlag
		
		cmp r4,#0		//row 1
		beq cr1
	
		cmp r4,#1		//row 2
		beq cr2
		
		cmp r4,#2		//row 3
		beq cr3
		
		cr1:		
		ldr r0,storedR1InvaderX
		ldr r1,baseR1InvaderY
		b cStoreGeneric
		
		cr2:		
		ldr r0,storedR2InvaderX
		ldr r1,baseR2InvaderY
		b cStoreGeneric
		
		cr3:		
		ldr r0,storedR3InvaderX
		ldr r1,baseR3InvaderY		
		
		cStoreGeneric:
		str r0,baseInvaderX
		str r1,baseInvaderY		
		
		loopClearRow:
			mov r3,#0
			bl editR23Invader
		
			add r0,r0,#12			//spacing between invaders
			sub r10,r10,#1
			str r0,baseInvaderX
			cmp r10,#0
			bne loopClearRow
			
		ldr r0,baseInvaderX
		ldr r10,invaderRowWidth
		
//-----------		
	clearRowEnd:
			
		cmp r4,#0
		beq cre1
		
		cmp r4,#1
		beq cre2
			
		cmp r4,#2
		beq cre3
			
		cre1:			
		
			ldr r0,baseR1InvaderX
			str r0,storedR1InvaderX		
			b endClearRow
		cre2:
			ldr r0,baseR2InvaderX
			str r0,storedR2InvaderX
			b endClearRow
		cre3:
			ldr r0,baseR3InvaderX
			str r0,storedR3InvaderX
			b endClearRow	
	
	endClearRow:

		
	pop {lr,r3,r4,r10}
	RET	

//r7 = invader direction (0 left, 1 down, 2 right)
moveRow:
		push {lr,r0,r1,r4-r8,r10}
		
		mov r6,#0
		add r6,r6,#1
		
		ldr r7,invaderDirection
		ldr r10,invaderRowWidth
		ldr r4,screenLeftEdge
		ldr r5,screenRightEdge
		
		bl clearRowOfInvader
		ldr r0,storedInvaderX
		ldr r1,baseInvaderY
		 
		checkIRightEdge:
			cmp r0,#24
			bne checkILeftEdge
			mov r7,#1
		
		checkILeftEdge:
			cmp r0,#0
			bne checkMRRight
			mov r7,#1
		
		checkMRRight:
			cmp r7,#2
			beq moveRowRight
		
		checkMRLeft:
			cmp r7,#0
			beq moveRowLeft
			
		checkMRDown:
			cmp r7,#1
			beq moveRowDown
		
		
		moveRowDown:
		halt
			add r1,r1,#2				//moves the space invader down
			str r1,baseInvaderY
			ldr r0,storedInvaderX
			str r0,baseInvaderX
			bl drawRowOfInvader
			halt
			
			cmp r0,#132
			beq ifIOnRight
			
			cmp r0,#108		
			beq ifIOnLeft
			
			b endMoveRow
			
			ifIOnRight:
				mov r7,#0
				str r7,invaderDirection
				bl clearRowOfInvader
				mov r0,#24
				b moveRowLeft
			
			ifIOnLeft:
				mov r7,#2
				str r7,invaderDirection
				bl clearRowOfInvader
				mov r0,#0
				b moveRowRight
			
		moveRowRight:
			add r0,r0,#2
			str r0,baseInvaderX
			str r0,storedInvaderX
			bl drawRowOfInvader
			b endMoveRow
			
		moveRowLeft:
			sub r0,r0,#2
			str r0,baseInvaderX
			str r0,storedInvaderX
			bl drawRowOfInvader
			b endMoveRow
				
		endMoveRow:
		
			ldr r8,invaderFlag
			ldr r0,storedInvaderX
			ldr r1,baseInvaderY
			
			cmp r8,#0
			beq mr1
			
			cmp r8,#1
			beq mr2
			
			cmp r8,#2
			beq mr3
			
			mr1:			
				str r0,baseR1InvaderX				
				str r1,baseR1InvaderY
				mov r8,#1					//swapping to row 2
				b endMoveRow2
			mr2:
				str r0,baseR2InvaderX
				str r1,baseR2InvaderY
				mov r8,#2					//swapping to row 3
				b endMoveRow2
			mr3:
				str r0,baseR3InvaderX
				str r1,baseR3InvaderY
				mov r8,#0					//swapping to row 1
				b endMoveRow2
		
		endMoveRow2:
			str r8,invaderFlag
			
		pop {lr,r0,r1,r4-r8,r10}
		RET
	
	
//when space pressed, then it shoots a laser starting above the ship and will keep going to the top then a new laser will be able to be fired.
drawLaser:					
	push {lr,r0-r3}
	
		mov r3,#120			//red colour
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET	
	
handleLasers:
	push {lr,r0,r1,r5,r6}
	
		ldr r5,existingLaser
		ldr r6,fireLaser
				
		
		cmp r6,#0
		beq checkForLaser
		
		cmp r5,#0
		beq initialFire
		
		
		checkForLaser:
		cmp r5,#1
		beq moveLaser
				
		b hLExit
		
		initialFire:
		
			ldr r0,shipX
			ldr r1,shipY

			str r0,laserX
			str r1,laserY

			sub r1,r1,#1
			bl drawLaser
			
			mov r5,#1
			mov r6,#0
			
		b hLExit
		
		moveLaser:
			ldr r0,laserX
			ldr r1,laserY
			
			bl clearpixel
			sub r1,r1,#1
			bl drawLaser
			
			cmp r1,#0
			bne hLExit
			bl clearpixel
			mov r5,#0

	hLExit:
	str r5,existingLaser
	str r6,fireLaser
	str r0,laserX
	str r1,laserY		
	pop {lr,r0,r1,r5,r6}
	RET

//given x in r0, y in r1 returns screen pos from r2 and then calls editPixel at that location on the screen	
drawFromXY:			
	push {lr,r2}
	
	mov r2,#0
	
	lsl r2,r1,#7	//changed from multiplying by adding to using LSL to multiply the y value by 128
	add r2,r2,r0	//this now runs much faster
	bl editPixel
	
	pop {lr,r2}
	RET

editPixel:			//r3 colour
	push {lr,r12}
	mov r12,#.PixelScreen
	strb r3,[r2+r12]
	pop {lr,r12}
	RET
	
halt

//storing these in main memory---KEEP IT AT THE BOTTOM
shipX:
	.word 4
	
shipY:
	.word 90
	
shipDirection:
	.word 1

shipMove:
	.word 0


laserX:
	.word 1
	
laserY:
	.word 1
	
existingLaser:
	.word 0
	
invaderFlag:
	.word 0

fireLaser:
	.word 0
	
baseInvaderX:		//generic X coordinate
	.word 0
baseInvaderY:		//generic Y coord
	.word 0
storedInvaderX:
	.word 4

baseR1InvaderX:
	.word 4
		
storedR1InvaderX:
	.word 4
	
baseR1InvaderY:
	.word 4	
	
	
baseR2InvaderX:
	.word 4
		
storedR2InvaderX:
	.word 4
	
baseR2InvaderY:
	.word 14
	
	
baseR3InvaderX:
	.word 4
		
storedR3InvaderX:
	.word 4
	
baseR3InvaderY:
	.word 24
	
invaderRowWidth:
	.word 9
	
invaderColLength:
	.word 2
	
invaderDirection:
	.word 2


	
	
screenLeftEdge:
	.word 1
	
screenRightEdge:
	.word 126
	
interruptSCounter:
	.word 0
	
interruptICounter:
	.word 0
	
invaderRow23ArmsUp:
	.byte 0b01000010
	.byte 0b00100100
    .byte 0b10111101
	.byte 0b11011011
	.byte 0b11111111
	.byte 0b01000010
	.byte 0b10000001
	.byte 0b00000000
	
invader23ArmsDown:
	.byte 0b01000010
    .byte 0b00100100
	.byte 0b00111100
	.byte 0b01011010
	.byte 0b11111111
	.byte 0b11000011
	.byte 0b10100101
	.byte 0b00000000