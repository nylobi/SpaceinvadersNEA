// Set up Clockinterrupt handling
setUp:

		mov r0, #handleKeyPress
		str r0, .KeyboardISR 
		mov r0,#1
		strb r0, .KeyboardMask


//Enable all interrupts
      mov r0,#1
      strb r0,.InterruptRegister





Main:
	bl moveInvaders
		b Main				//infinite loop to test if keyboard presses work
	
halt


//call this from interupt
handleKeyPress:			
	push {lr,r11,r12}
	ldr r12,.LastKey
	
	
	cmp r12,#65		//A
	bne checkForD	
	mov r11,#0				//r11 is the direction of the ship
	str r11,shipDirection
	bl moveShip
	
	
	checkForD:
	cmp r12,#68		//D
	bne checkForSpace	
	mov r11,#2
	str r11,shipDirection	
	bl moveShip
	
	
	checkForSpace:
	cmp r12,#32
	bne exit
	
	exit:
	pop {lr,r11,r12}
	RFE					//RFE = return from exception



moveShip:
	push {lr,r0-r5,r11}
	ldr r11,shipDirection
    ldr r0,shipX
    ldr r1,shipY
	
	ldr r4,screenLeftEdge
	ldr r5,screenRightEdge
	
	mov r3,#0
    bl drawFromXY

	
	cmp r11,#0
	beq moveLeft
	cmp r11,#2
	beq moveRight
	b msEnd
	
	moveLeft:
	cmp r0,r4
	beq msEnd			//checking if the ship is at the edge of the screen
	
	sub r0,r0,#1
	b msEnd
	
	moveRight:
	cmp r0,r5
	beq msEnd			//checking if the ship is at the edge of the screen
	
	add r0,r0,#1

	b msEnd
	
	msEnd:
	bl drawShip
	str r0,shipX
	str r11,shipDirection
	pop {lr,r0-r5,r11}
	RET

	
//given x in r0 and y in r1 draws the ship at that location	
drawShip:					
	push {lr,r0-r3}
	
		mov r3,#10			//green colour | will change back to green if wanted
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET

//given x in r0 and y in r1 draws a white pixel at that location (white is the background colour)	
clearpixel:					
	push {lr,r0-r3}
	
		mov r3,#0			
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET
	
	
clearRow:
	push {lr}
	 
		
		loopRowClear:
			bl clearpixel			
			add r0,r0,#2
			sub r10,r10,#1
			cmp r10,#0
			bne loopRowClear
		ldr r0,baseClearingX
		ldr r10,clearSpaceWidth
	pop {lr}
	RET
	
	
clearGrid:

	push {lr,r0,r1,r10,r11}
		
		ldr r0,baseClearingX
		ldr r1,baseClearingY
		ldr r10,clearSpaceWidth
		ldr r11,clearSpaceHeight
		
		loopColClear:
		
			bl clearRow
			add r1,r1,#2
			sub r11,r11,#1
			cmp r11,#0			
			bne loopColClear
			
	pop {lr,r0,r1,r10,r11}
	RET


//given x in r0 and y in r1 draws a space invader at that location
drawSingleInvader:					
	push {lr,r0-r3}
	
		mov r3,#55			//green colour
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET
	
//given x in r0 and y in r1 (the starting position) will draw a row of space invaders given a width in invaderRowWidth
drawRowInvader:				
	push {lr}
	 
		
		loopRow:
			bl drawSingleInvader			
			add r0,r0,#2
			sub r10,r10,#1
			cmp r10,#0
			bne loopRow
		ldr r0,baseInvaderX
		ldr r10,invaderRowWidth
	pop {lr}
	RET

//takes in starting x in baseInvaderX y in baseInvaderY, rows in invaderRowWidth, cols in invaderColLength (keeps direction in r10	
drawGridOfInvaders:			
	push {lr,r0,r1,r10,r11}
		
		ldr r0,baseInvaderX
		ldr r1,baseInvaderY
		ldr r10,invaderRowWidth
		ldr r11,invaderColLength
		
		loopCol:
		
			bl drawRowInvader
			add r1,r1,#2
			sub r11,r11,#1
			cmp r11,#0			
			bne loopCol
			
	pop {lr,r0,r1,r10,r11}
	RET
	

moveInvaders:
	push {lr,r0,r4,r5,r6,r10,r11}	
	ldr r10,invaderRowWidth
	ldr r11,invaderColLength
	ldr r4,screenLeftEdge
	ldr r5,screenRightEdge

	//lsl r10,r10,#1
	sub r5,r5,#23
	ldr r6,invaderDirection
	
	bl clearGrid
	
	ldr r0,baseInvaderX
	ldr r1,baseInvaderY

	
	cmp r0,r5
	bgt moveIDown
	cmp r0,r4
	blt moveIDown
	
	
	checkIDR:
		cmp r6,#2
		bne checkIDL
		b moveIRight

		checkIDL:
			cmp r6,#0
			bne moveIEnd
			b moveILeft
			
		
	
	moveIRight:
		add r0,r0,#5				//moves invaders 5 spaces to the right
		b moveIEnd

		
	moveILeft:
		sub r0,r0,#5				//moves invaders 5 spaces to the left
		b moveIEnd

	moveIDown:
		add r1,r1,#5
		b changeID	

	changeID:
		cmp r6,#0
		bne changeIDR
		mov r6,#2
		b moveIRight
		
		changeIDR:
			cmp r6,#2
			bne moveIEnd
			mov r6,#0
			b moveILeft
			
			
	
	moveIEnd:
	str r6,invaderDirection	
	str r0,baseInvaderX
	str r0,baseClearingX	
	str r1,baseInvaderY
	str r1,baseClearingY
	bl drawGridOfInvaders
	pop {lr,r0,r4,r5,r6,r10,r11}
	RET



//given x in r0, y in r1 returns screen pos from r2 and then calls editPixel at that location on the screen	
drawFromXY:			
	push {lr}
	
	mov r2,#0
	
	lsl r2,r1,#7	//changed from multiplying by adding to using LSL to multiply the y value by 128
	add r2,r2,r0	//this now runs much faster
	bl editPixel
	
	
	pop {lr}
	RET

editPixel:			//r3 colour
	push {lr,r12}
	mov r12,#.PixelScreen
	strb r3,[r2+r12]
	pop {lr,r12}
	RET
	
	
halt


//storing these in main memory---KEEP IT AT THE BOTTOM
shipX:
	.word 4
	
shipY:
	.word 90
	
shipDirection:
	.word 1

	
laserX:
	.word 1
	
laserY:
	.word 1
	
	
baseInvaderX:
	.word 8
		
baseInvaderY:
	.word 8
	
invaderRowWidth:
	.word 11
	
invaderColLength:
	.word 5	
	
invaderDirection:
	.word 2
	

baseClearingX:
	.word 8
		
baseClearingY:
	.word 8
	
clearSpaceWidth:
	.word 11
	
clearSpaceHeight:
	.word 5	
	
	
screenLeftEdge:
	.word 0
	
screenRightEdge:
	.word 127