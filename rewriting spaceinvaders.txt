setUp:
// Set up Clockinterrupt handling
		mov r0, #handleKeyPress
		str r0, .KeyboardISR 
		mov r0,#1
		strb r0, .KeyboardMask


//Enable all interrupts
      mov r0,#1
      strb r0,.InterruptRegister





Main:

		b Main				//infinite loop to test if keyboard presses work
	
halt



handleKeyPress:			//call this from interupt
	push {lr,r11,r12}
	ldr r12,.LastKey
	
	
	cmp r12,#65		//A
	bne checkForD	
	mov r11,#0				//r11 is the direction of the ship
	str r11,shipDirection
	bl moveShip
	
	
	checkForD:
	cmp r12,#68		//D
	bne checkForSpace	
	mov r11,#2
	str r11,shipDirection	
	bl moveShip
	
	
	checkForSpace:
	cmp r12,#32
	bne exit
	
	exit:
	pop {lr,r11,r12}
	RFE					//RFE = return from exception



moveShip:
	push {lr,r0-r5,r11}
	ldr r11,shipDirection
    ldr r0,shipX
    ldr r1,shipY
	
	ldr r4,screenLeftEdge
	ldr r5,screenRightEdge
	
	mov r3,#0
    bl drawFromXY

	
	cmp r11,#0
	beq moveLeft
	cmp r11,#2
	beq moveRight
	b msEnd
	
	moveLeft:
	cmp r0,r4
	beq msEnd			//checking if the ship is at the edge of the screen
	
	sub r0,r0,#1
	b msEnd
	
	moveRight:
	cmp r0,r5
	beq msEnd			//checking if the ship is at the edge of the screen
	
	add r0,r0,#1

	b msEnd
	
	msEnd:
	bl drawShip
	str r0,shipX
	str r11,shipDirection
	pop {lr,r0-r5,r11}
	RET
	
	
drawShip:					//given x in r0 and y in r1 draws the ship at that location
	push {lr,r0-r3}
	
		mov r3,#10			//green colour | will change back to green if wanted
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET


drawSingleInvader:					//given x in r0 and y in r1 draws a space invader at that location
	push {lr,r0-r3}
	
		mov r3,#55			//green colour
		bl drawFromXY
	
	pop {lr,r0-r3}
	RET
	
	
drawRowInvader:				//given x in r0 and y in r1 (the starting position) will draw a row of space invaders given a width in invaderRowWidth
	push {lr}
	 
		
		loopRow:
			bl drawSingleInvader			
			add r0,r0,#2
			sub r10,r10,#1
			cmp r10,#0
			bne loopRow
		ldr r0,baseInvaderX
		ldr r10,invaderRowWidth
	pop {lr}
	RET

drawGridOfInvaders:			//takes in starting x in baseInvaderX y in baseInvaderY, rows in invaderRowWidth, cols in invaderColLength (keeps direction in r10
	push {lr,r0,r1,r10,r11}
		
		ldr r0,baseInvaderX
		ldr r1,baseInvaderY
		ldr r10,invaderRowWidth
		ldr r11,invaderColLength
		
		loopCol:
		
			bl drawRowInvader
			add r1,r1,#2
			sub r11,r11,#1
			cmp r11,#0			
			bne loopCol
			
	pop {lr,r0,r1,r10,r11}
	RET
	
		
drawFromXY:			//given x in r0, y in r1 returns screen pos from r2 and then calls editPixel at that location on the screen
	push {lr}
	
	mov r2,#0
	
	lsl r2,r1,#7	//changed from multiplying by adding to using LSL to multiply the y value by 128
	add r2,r2,r0	//this now runs much faster
	bl editPixel
	
	
	pop {lr}
	RET

editPixel:			//r3 colour
	push {lr,r12}
	mov r12,#.PixelScreen
	strb r3,[r2+r12]
	pop {lr,r12}
	RET
	
	
halt


//storing these in main memory---KEEP IT AT THE BOTTOM
shipX:
	.word 4
	
shipY:
	.word 90
	
shipDirection:
	.word 1

laserX:
	.word 1
	
laserY:
	.word 1
	
baseInvaderX:
	.word 72
		
baseInvaderY:
	.word 64
	
invaderRowWidth:
	.word 11
	
invaderColLength:
	.word 5
	
invaderDirection:
	.word 1
screenLeftEdge:
	.word 0
screenRightEdge:
	.word 127