defineRegisters:	

		//all laser related registers
    	mov r4,#33          //laser x and y
    	mov r5,#20
		//all spaceinvader related registers
		mov r6,#4          //Space invader cols
		mov r7,#3           //Space invader rows
		mov r8,#2           //space invader direction (0 for left, 1 for right, 2 for still)
		mov r9,#1           //space invader x and y
		mov r10,#3       
		//all spaceship related registers
		mov r11,#1          // r11 and r12 storing x and y coordinates of spaceship
		mov r12,#20

main:
	bl drawInvaderGrid



//Going to change calculateXYlocation to calculate and draw a pixel
//value for x in r0, y in r1, return screenpos in r2, take in colour in r3 and then draw a pixel.

calculateXYAndDraw:		//given a value for x in r0, y in r1, returns screen position in r2
	push {lr,r0-r1,r3,r4}		//restore all value EXCEPT THE RETURN VALUE
	mov r2,#0
    loopY:				//calculating y
	    add r2,r2,#32
	    sub r1,r1,#1
	    cmp r1,#0
	    bgt loopY
	    add r2,r2,r0		//calculating left
		
		ldr r4,.PixelScreen
		add r4,r4,r2
		strb r3,[r4]

	
	    pop {lr,r0-r1,r3,r4}
	    mov pc, lr		//return from a subroutine


drawInvaderGrid:                   //give x in r9, y in r10, cols in r3, rows in r4 draws a grid with a space of one
    push {lr,r0-r5,r11}                 //when y > 0, grid ok but else grid is broken.  x + col shouldnt >= 17 or bad
    
    // get properties of invaders
    mov r0,r9
    mov r1,r10
    mov r3,r6	//cols
    mov r4,r7	//rows
		
		loopRow:
			cmp r4,#0
			beq exit
			
			//need part here for rows
			
			mov r5,r3
			loopColumn:
				cmp r5,#0
				beq loopRow
				bl calculateXYAndDraw
				sub r5,r5,#1
				add r2,r2,#2
				bl loopColumn

        exit:
        pop {lr,r0-r5,r11}
        mov pc, lr

		
halt
       
    //loopRow:
      //  cmp r4,#0
        //beq exit
        
        //bl calculateXYLocation 
        //sub r4,r4,#1
        //add r1,r1,#2
                
        //mov r5,r3				//making a new counter
        //loopColumn:
            
          //  cmp r5,#0
            //beq loopRow
            //strb r11,[r2+3328]
            //sub r5,r5,#1
            //add r2,r2,#2
            //bl loopColumn